#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
控制结构 - 练习题

本文件包含控制结构相关的练习题，帮助巩固条件语句、循环语句和控制流的使用。
"""

# ============================================================================
# 练习1：条件语句基础
# ============================================================================

def exercise_1():
    """
    练习1：条件语句基础
    
    编写程序实现以下功能：
    1. 判断一个数字是正数、负数还是零
    2. 根据分数判断等级（90+优秀，80-89良好，70-79中等，60-69及格，<60不及格）
    3. 判断一个年份是否为闰年
    4. 根据BMI值判断体重状况
    """
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习2：for循环基础
# ============================================================================

def exercise_2():
    """
    练习2：for循环基础
    
    使用for循环完成以下任务：
    1. 打印1到10的所有数字
    2. 计算1到100的和
    3. 打印列表中所有偶数
    4. 遍历字典并打印所有键值对
    5. 使用enumerate打印列表元素及其索引
    """
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    student_info = {"name": "张三", "age": 20, "major": "计算机科学"}
    fruits = ["苹果", "香蕉", "橙子", "葡萄"]
    
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习3：while循环基础
# ============================================================================

def exercise_3():
    """
    练习3：while循环基础
    
    使用while循环完成以下任务：
    1. 计算2的幂次，直到结果大于1000
    2. 模拟用户输入，直到输入"quit"为止
    3. 实现简单的倒计时功能
    4. 找到第一个大于100的斐波那契数
    """
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习4：循环控制语句
# ============================================================================

def exercise_4():
    """
    练习4：循环控制语句
    
    使用break、continue、pass完成以下任务：
    1. 在1-20中找到第一个能被7整除的数
    2. 打印1-20中所有不能被3整除的数
    3. 处理一个列表，跳过None值
    4. 使用for-else查找列表中是否存在某个值
    """
    data = [1, 2, None, 4, 5, None, 7, 8, 9, 10]
    search_list = [10, 20, 30, 40, 50]
    target = 35
    
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习5：嵌套循环
# ============================================================================

def exercise_5():
    """
    练习5：嵌套循环
    
    使用嵌套循环完成以下任务：
    1. 打印一个5x5的星号矩阵
    2. 打印直角三角形（星号）
    3. 打印九九乘法表
    4. 遍历二维列表并找出最大值
    """
    matrix = [
        [1, 5, 3],
        [9, 2, 8],
        [4, 7, 6]
    ]
    
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习6：推导式
# ============================================================================

def exercise_6():
    """
    练习6：推导式
    
    使用推导式完成以下任务：
    1. 生成1-10的平方数列表
    2. 从字符串列表中筛选出长度大于5的字符串
    3. 创建一个字典，键为1-5，值为其立方
    4. 从嵌套列表中提取所有偶数
    5. 生成一个集合，包含字符串列表中所有字符串的长度
    """
    words = ["python", "java", "javascript", "go", "rust", "c++"]
    nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]
    
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习7：数据处理
# ============================================================================

def exercise_7():
    """
    练习7：数据处理
    
    处理学生成绩数据：
    1. 计算每个学生的平均分
    2. 找出平均分最高的学生
    3. 统计每个分数段的学生人数
    4. 找出某科目成绩最高的学生
    """
    students = [
        {"name": "张三", "math": 85, "english": 90, "science": 78},
        {"name": "李四", "math": 92, "english": 88, "science": 95},
        {"name": "王五", "math": 76, "english": 82, "science": 80},
        {"name": "赵六", "math": 88, "english": 85, "science": 90},
        {"name": "钱七", "math": 95, "english": 92, "science": 89}
    ]
    
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习8：文本分析
# ============================================================================

def exercise_8():
    """
    练习8：文本分析
    
    分析给定文本：
    1. 统计单词出现频率
    2. 找出最长的单词
    3. 统计每个字母出现的次数
    4. 找出出现次数最多的单词
    """
    text = """Python is a high-level programming language. 
    Python emphasizes code readability and simplicity. 
    Many developers choose Python for web development, 
    data analysis, and artificial intelligence projects."""
    
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习9：数学计算
# ============================================================================

def exercise_9():
    """
    练习9：数学计算
    
    实现以下数学计算：
    1. 计算阶乘（n!）
    2. 判断一个数是否为质数
    3. 生成指定范围内的所有质数
    4. 计算最大公约数（GCD）
    5. 生成帕斯卡三角形的前n行
    """
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习10：模式匹配和查找
# ============================================================================

def exercise_10():
    """
    练习10：模式匹配和查找
    
    实现以下查找功能：
    1. 在列表中查找所有满足条件的元素
    2. 查找字符串中所有子字符串的位置
    3. 实现简单的模式匹配（通配符*和?）
    4. 在二维列表中查找特定值的坐标
    """
    numbers = [1, 5, 3, 8, 2, 9, 4, 7, 6, 10, 15, 12]
    text = "hello world, hello python, hello programming"
    pattern = "hello"
    
    grid = [
        [1, 2, 3, 4],
        [5, 6, 7, 8],
        [9, 10, 11, 12],
        [13, 14, 15, 16]
    ]
    target_value = 7
    
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习11：游戏逻辑
# ============================================================================

def exercise_11():
    """
    练习11：游戏逻辑
    
    实现简单游戏逻辑：
    1. 猜数字游戏（计算机随机生成数字，用户猜测）
    2. 石头剪刀布游戏
    3. 简单的文字冒险游戏
    4. 井字棋游戏的胜负判断
    """
    # 井字棋棋盘示例
    tic_tac_toe_board = [
        ['X', 'O', 'X'],
        ['O', 'X', 'O'],
        ['X', 'O', 'X']
    ]
    
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习12：算法实现
# ============================================================================

def exercise_12():
    """
    练习12：算法实现
    
    实现基本算法：
    1. 冒泡排序
    2. 选择排序
    3. 线性搜索
    4. 二分搜索
    5. 计算数组中的最大子数组和（Kadane算法）
    """
    unsorted_list = [64, 34, 25, 12, 22, 11, 90]
    sorted_list = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
    search_target = 7
    
    array_with_negatives = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
    
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习13：数据验证
# ============================================================================

def exercise_13():
    """
    练习13：数据验证
    
    实现数据验证功能：
    1. 验证邮箱格式
    2. 验证手机号格式
    3. 验证密码强度
    4. 验证身份证号格式
    5. 验证信用卡号（Luhn算法）
    """
    test_emails = [
        "user@example.com",
        "invalid-email",
        "test@domain.co.uk",
        "@invalid.com",
        "user@.com"
    ]
    
    test_phones = [
        "13812345678",
        "1234567890",
        "138-1234-5678",
        "86-138-1234-5678"
    ]
    
    test_passwords = [
        "password",
        "Password123",
        "P@ssw0rd!",
        "12345678",
        "MySecureP@ssw0rd123"
    ]
    
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习14：文件模拟处理
# ============================================================================

def exercise_14():
    """
    练习14：文件模拟处理
    
    模拟文件处理操作：
    1. 解析CSV格式的字符串数据
    2. 统计日志中不同级别的消息数量
    3. 处理配置文件格式的数据
    4. 分析访问日志中的IP地址访问频率
    """
    csv_data = """name,age,city
    张三,25,北京
    李四,30,上海
    王五,28,广州
    赵六,35,深圳"""
    
    log_data = """2023-01-01 10:00:00 INFO User login successful
    2023-01-01 10:05:00 WARNING Invalid password attempt
    2023-01-01 10:10:00 ERROR Database connection failed
    2023-01-01 10:15:00 INFO User logout
    2023-01-01 10:20:00 ERROR File not found
    2023-01-01 10:25:00 WARNING Disk space low"""
    
    config_data = """# 配置文件
    host=localhost
    port=8080
    debug=true
    # 数据库配置
    db_host=127.0.0.1
    db_port=3306"""
    
    access_log = """192.168.1.1 - GET /index.html
    192.168.1.2 - POST /login
    192.168.1.1 - GET /about.html
    192.168.1.3 - GET /index.html
    192.168.1.1 - GET /contact.html
    192.168.1.2 - GET /dashboard"""
    
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习15：综合应用
# ============================================================================

def exercise_15():
    """
    练习15：综合应用 - 学生管理系统
    
    创建一个简单的学生管理系统，实现以下功能：
    1. 添加学生信息
    2. 查找学生（按姓名或学号）
    3. 计算班级平均分
    4. 生成成绩报告
    5. 按成绩排序
    6. 统计各分数段人数
    """
    # 初始学生数据
    students_database = [
        {"id": "001", "name": "张三", "scores": {"math": 85, "english": 90, "science": 78}},
        {"id": "002", "name": "李四", "scores": {"math": 92, "english": 88, "science": 95}},
        {"id": "003", "name": "王五", "scores": {"math": 76, "english": 82, "science": 80}}
    ]
    
    # 在这里编写你的代码
    # 提示：可以定义多个函数来实现不同功能
    pass

if __name__ == "__main__":
    print("控制结构练习题")
    print("=" * 50)
    print("请完成以上练习题，然后查看solutions.py文件获取参考答案。")
    print("\n练习提示：")
    print("- 从简单的练习开始，逐步增加难度")
    print("- 每完成一个练习就运行测试，确保代码正确")
    print("- 尝试用不同的方法解决同一个问题")
    print("- 注意代码的可读性和效率")
    print("- 遇到困难时可以查看examples.py中的示例")
    print("\n练习分类：")
    print("- 练习1-4：基础控制结构")
    print("- 练习5-6：嵌套结构和推导式")
    print("- 练习7-8：数据处理")
    print("- 练习9-12：算法实现")
    print("- 练习13-15：实际应用")