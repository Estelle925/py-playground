#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
字符串操作 - 练习题

本文件包含字符串操作相关的练习题，帮助巩固字符串处理技能。
"""

# ============================================================================
# 练习1：字符串基础操作
# ============================================================================

def exercise_1():
    """
    练习1：字符串基础操作
    
    要求：
    1. 创建一个字符串变量，包含你的姓名
    2. 获取字符串的长度
    3. 将字符串转换为大写
    4. 将字符串转换为小写
    5. 获取第一个字符和最后一个字符
    """
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习2：字符串切片
# ============================================================================

def exercise_2():
    """
    练习2：字符串切片
    
    给定字符串："Python Programming Language"
    要求：
    1. 获取前6个字符
    2. 获取后8个字符
    3. 获取中间的单词"Programming"
    4. 反转整个字符串
    5. 每隔一个字符取一个字符
    """
    text = "Python Programming Language"
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习3：字符串查找和替换
# ============================================================================

def exercise_3():
    """
    练习3：字符串查找和替换
    
    给定文本："Python is great. Python is powerful. Python is easy to learn."
    要求：
    1. 统计"Python"出现的次数
    2. 找到第一个"Python"的位置
    3. 找到最后一个"Python"的位置
    4. 将所有"Python"替换为"Java"
    5. 只替换第一个"Python"为"JavaScript"
    """
    text = "Python is great. Python is powerful. Python is easy to learn."
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习4：字符串分割和连接
# ============================================================================

def exercise_4():
    """
    练习4：字符串分割和连接
    
    给定数据："apple,banana,orange,grape,watermelon"
    要求：
    1. 将字符串按逗号分割成列表
    2. 将列表重新连接成字符串，用" | "分隔
    3. 将每个水果名称首字母大写后连接
    4. 按字母顺序排序后连接
    """
    fruits = "apple,banana,orange,grape,watermelon"
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习5：字符串格式化
# ============================================================================

def exercise_5():
    """
    练习5：字符串格式化
    
    给定数据：
    - 姓名："张三"
    - 年龄：25
    - 分数：88.5
    
    要求：
    1. 使用%格式化输出："姓名：张三，年龄：25岁，分数：88.5分"
    2. 使用format()方法输出相同内容
    3. 使用f-string输出相同内容
    4. 格式化分数为两位小数
    5. 将年龄右对齐到5位宽度
    """
    name = "张三"
    age = 25
    score = 88.5
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习6：字符串验证
# ============================================================================

def exercise_6():
    """
    练习6：字符串验证
    
    编写函数验证以下内容：
    1. 检查字符串是否只包含数字
    2. 检查字符串是否只包含字母
    3. 检查字符串是否只包含字母和数字
    4. 检查字符串是否为有效的邮箱格式（简单验证）
    5. 检查字符串是否为有效的手机号码（11位数字）
    """
    test_strings = [
        "12345",
        "hello",
        "hello123",
        "user@example.com",
        "13812345678",
        "invalid-email",
        "1234567890"
    ]
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习7：文本处理
# ============================================================================

def exercise_7():
    """
    练习7：文本处理
    
    给定一段文本，要求：
    1. 统计单词数量
    2. 统计每个单词出现的次数
    3. 找出最长的单词
    4. 移除所有标点符号
    5. 将文本转换为标题格式（每个单词首字母大写）
    """
    text = """Python is a high-level, interpreted programming language. 
    Python's design philosophy emphasizes code readability. 
    Python is widely used in web development, data analysis, and artificial intelligence."""
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习8：密码强度检查
# ============================================================================

def exercise_8():
    """
    练习8：密码强度检查
    
    编写一个函数检查密码强度：
    - 长度至少8位
    - 包含大写字母
    - 包含小写字母
    - 包含数字
    - 包含特殊字符
    
    根据满足条件的数量评定密码强度：
    - 5个条件都满足：强
    - 4个条件满足：中等
    - 3个条件满足：弱
    - 少于3个条件：很弱
    """
    passwords = [
        "password",
        "Password123",
        "P@ssw0rd",
        "MySecureP@ssw0rd123",
        "123456",
        "Aa1!"
    ]
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习9：字符串编码解码
# ============================================================================

def exercise_9():
    """
    练习9：字符串编码解码
    
    要求：
    1. 将中文字符串编码为UTF-8字节
    2. 将字节解码回字符串
    3. 尝试不同的编码格式（GBK、ASCII等）
    4. 处理编码错误
    """
    chinese_text = "你好，世界！Python编程"
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习10：综合应用 - 简单文本分析器
# ============================================================================

def exercise_10():
    """
    练习10：综合应用 - 简单文本分析器
    
    创建一个文本分析器，分析给定文本的以下信息：
    1. 字符总数（包括空格）
    2. 字符总数（不包括空格）
    3. 单词总数
    4. 句子总数
    5. 段落总数
    6. 平均单词长度
    7. 最常用的5个单词
    8. 最长的句子
    """
    text = """Python is a powerful programming language. It is easy to learn and use.
    
    Python supports multiple programming paradigms. Object-oriented programming is one of them.
    Functional programming is another paradigm that Python supports.
    
    Python has a rich ecosystem of libraries and frameworks. This makes Python very popular
    among developers worldwide."""
    # 在这里编写你的代码
    pass

if __name__ == "__main__":
    print("字符串操作练习题")
    print("=" * 50)
    print("请完成以上练习题，然后查看solutions.py文件获取参考答案。")
    print("\n提示：")
    print("- 可以逐个运行每个练习函数")
    print("- 使用print()输出结果")
    print("- 遇到困难时可以查看examples.py中的示例")
    print("- 完成后对比solutions.py中的参考答案")