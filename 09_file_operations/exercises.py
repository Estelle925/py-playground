#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
文件操作练习题

本文件包含了Python文件操作的各种练习题，涵盖：
1. 基础文件操作
2. 文本文件处理
3. 二进制文件处理
4. 文件系统操作
5. 高级文件操作
6. 综合应用

作者：Python学习助手
日期：2024年
"""

import os
import sys
from pathlib import Path

print("文件操作练习题")
print("=" * 50)

# ============================================================================
# 1. 基础文件操作练习
# ============================================================================

print("\n1. 基础文件操作练习")
print("-" * 30)

"""
练习 1.1: 文件读写基础

创建一个名为 file_reader_writer.py 的程序，实现以下功能：
1. 创建一个文本文件，写入至少5行不同的内容
2. 读取整个文件内容并打印
3. 逐行读取文件内容并打印行号和内容
4. 将文件内容读取到列表中，然后打印列表
5. 在文件末尾追加两行新内容
6. 再次读取并打印整个文件内容

提示：使用 open() 函数的不同模式 ('w', 'r', 'a')
"""

"""
练习 1.2: 文件指针操作

创建一个名为 file_pointer.py 的程序，实现以下功能：
1. 创建一个文本文件，写入一段包含多行的文本
2. 打开文件并读取前10个字符
3. 获取并打印当前文件指针位置
4. 移动文件指针到文件开头，再读取5个字符
5. 移动文件指针到文件中间位置，读取并打印该位置开始的一行内容
6. 移动文件指针到文件末尾，尝试读取内容并解释结果
7. 使用 seek() 和 tell() 方法，计算文件的总字节数

提示：使用 seek() 和 tell() 方法操作文件指针
"""

"""
练习 1.3: 安全的文件操作

创建一个名为 safe_file_operations.py 的程序，实现以下功能：
1. 编写一个函数 safe_read(filename)，安全地读取文件内容：
   - 使用 try-except 处理可能的异常（文件不存在、权限问题等）
   - 确保文件正确关闭，即使发生异常
   - 返回文件内容或者在出错时返回错误信息

2. 编写一个函数 safe_write(filename, content)，安全地写入文件内容：
   - 使用 try-except 处理可能的异常
   - 确保文件正确关闭
   - 返回成功或失败的状态和消息

3. 测试这些函数，包括正常情况和异常情况（如尝试读取不存在的文件）

提示：使用 with 语句（上下文管理器）和异常处理
"""

# ============================================================================
# 2. 文本文件处理练习
# ============================================================================

print("\n2. 文本文件处理练习")
print("-" * 30)

"""
练习 2.1: CSV文件处理

创建一个名为 csv_processor.py 的程序，实现以下功能：
1. 创建一个CSV文件，包含以下列：'姓名', '年龄', '城市', '职业'
2. 添加至少5行不同的数据
3. 读取CSV文件并打印所有数据
4. 计算并打印所有人的平均年龄
5. 找出并打印来自同一个城市的所有人
6. 将数据按年龄排序后，写入新的CSV文件

提示：使用 csv 模块的 reader, writer, DictReader, DictWriter 类
"""

"""
练习 2.2: JSON文件处理

创建一个名为 json_processor.py 的程序，实现以下功能：
1. 创建一个包含以下数据的Python字典：
   - 学生信息列表，每个学生包含：id, 姓名, 年龄, 成绩列表
   - 课程信息，包含：课程名称, 教师, 学分
   - 学校信息，包含：学校名称, 地址, 建校年份

2. 将此字典保存为JSON文件

3. 从JSON文件读取数据，并实现以下功能：
   - 计算每个学生的平均成绩
   - 找出平均成绩最高的学生
   - 修改某个学生的信息
   - 将修改后的数据保存回JSON文件

提示：使用 json 模块的 dump, load, dumps, loads 方法
"""

"""
练习 2.3: 文本文件分析器

创建一个名为 text_analyzer.py 的程序，实现一个文本分析器，功能如下：
1. 接受一个文本文件路径作为输入
2. 分析并输出以下统计信息：
   - 总字符数（包括空格）
   - 总单词数
   - 总行数
   - 平均每行的字符数
   - 平均每行的单词数
   - 最常出现的10个单词及其出现次数
   - 最长的句子
   - 每个标点符号的出现次数

3. 将分析结果保存到一个新的文本文件中

提示：使用字符串方法、集合和字典来统计和存储数据
"""

# ============================================================================
# 3. 二进制文件处理练习
# ============================================================================

print("\n3. 二进制文件处理练习")
print("-" * 30)

"""
练习 3.1: 图像文件元数据读取器

创建一个名为 image_metadata.py 的程序，实现以下功能：
1. 接受一个图像文件路径作为输入（支持常见格式如JPG、PNG）
2. 读取并显示图像的基本信息：
   - 文件大小
   - 图像尺寸（宽x高）
   - 图像格式
   - 创建日期和修改日期
   - 颜色深度
   - 其他可用的元数据（如EXIF信息）

提示：
- 使用 Pillow 库（PIL）处理图像
- 使用 os.stat() 获取文件信息
- 对于EXIF数据，可以使用 PIL 的 _getexif() 方法或专门的EXIF库

注意：需要安装Pillow库：pip install Pillow
"""

"""
练习 3.2: 简单文件加密解密器

创建一个名为 file_encryptor.py 的程序，实现以下功能：
1. 实现一个简单的文件加密函数 encrypt_file(input_file, output_file, key)：
   - 读取输入文件的二进制内容
   - 使用简单的加密算法（如异或操作）和提供的密钥加密内容
   - 将加密后的内容写入输出文件

2. 实现对应的解密函数 decrypt_file(input_file, output_file, key)：
   - 读取加密文件的内容
   - 使用相同的密钥解密内容
   - 将解密后的内容写入输出文件

3. 测试这些函数，加密和解密一个文本文件，确保解密后的文件与原始文件内容相同

提示：
- 使用二进制模式('rb', 'wb')打开文件
- 可以使用简单的异或(XOR)操作进行加密和解密
- 确保密钥可以循环使用，以处理任意长度的文件
"""

"""
练习 3.3: 对象序列化与反序列化

创建一个名为 object_serializer.py 的程序，实现以下功能：
1. 定义一个复杂的Python类，如学生类(Student)，包含：
   - 基本属性：姓名、年龄、ID等
   - 复杂属性：课程列表、成绩字典等
   - 方法：计算平均分、显示信息等

2. 创建此类的多个实例，并添加到一个列表中

3. 实现将这些对象序列化到文件的函数：
   - 使用pickle模块序列化
   - 使用JSON序列化（需要自定义转换方法）

4. 实现从文件反序列化对象的函数

5. 比较两种序列化方法的优缺点

提示：
- 使用 pickle 模块的 dump 和 load 方法
- 对于JSON序列化，需要实现自定义的 to_json 和 from_json 方法
- 考虑序列化的安全性、可读性和跨平台兼容性
"""

# ============================================================================
# 4. 文件系统操作练习
# ============================================================================

print("\n4. 文件系统操作练习")
print("-" * 30)

"""
练习 4.1: 文件系统浏览器

创建一个名为 file_explorer.py 的程序，实现一个简单的文件系统浏览器，功能如下：
1. 显示当前目录的内容（文件和子目录）
2. 允许用户选择：
   - 进入子目录
   - 返回上一级目录
   - 查看文件详细信息（大小、修改日期等）
   - 搜索文件（按名称或扩展名）
   - 退出程序

3. 对于文件，显示其基本信息，并根据文件类型提供适当的操作选项：
   - 文本文件：查看内容
   - 图像文件：显示尺寸信息
   - 可执行文件：显示权限信息

提示：
- 使用 os 模块的函数或 pathlib 模块
- 实现一个交互式循环来处理用户输入
- 使用 os.path 或 Path 对象获取文件信息
"""

"""
练习 4.2: 目录同步工具

创建一个名为 directory_sync.py 的程序，实现一个简单的目录同步工具，功能如下：
1. 接受两个目录路径作为输入：源目录和目标目录
2. 比较两个目录的内容，并执行以下操作：
   - 将源目录中存在但目标目录不存在的文件复制到目标目录
   - 对于两边都存在的文件，比较修改时间，如果源文件较新则更新目标文件
   - 可选：删除目标目录中存在但源目录不存在的文件（谨慎使用）

3. 生成同步报告，包括：
   - 新增的文件数量和列表
   - 更新的文件数量和列表
   - 删除的文件数量和列表（如果启用删除）
   - 同步过程中的错误或警告

提示：
- 使用 os.walk() 或 pathlib 递归遍历目录
- 使用 shutil 模块进行文件复制
- 使用文件元数据（如修改时间）进行比较
- 实现日志记录功能
"""

"""
练习 4.3: 文件类型统计器

创建一个名为 file_type_analyzer.py 的程序，实现以下功能：
1. 接受一个目录路径作为输入
2. 递归遍历该目录及其所有子目录
3. 统计不同类型文件的数量和总大小，如：
   - 文本文件（.txt, .md, .csv等）
   - 图像文件（.jpg, .png, .gif等）
   - 文档文件（.pdf, .doc, .docx等）
   - 音频文件（.mp3, .wav等）
   - 视频文件（.mp4, .avi等）
   - 代码文件（.py, .js, .html等）
   - 其他类型

4. 生成统计报告，包括：
   - 每种类型的文件数量和百分比
   - 每种类型的总大小和百分比
   - 最大的10个文件及其路径
   - 最近修改的10个文件

5. 将报告保存为文本文件和JSON文件

提示：
- 使用 os.walk() 或 pathlib 递归遍历目录
- 使用文件扩展名判断文件类型，或使用 mimetypes 模块
- 使用字典存储统计数据
- 使用 os.path.getsize() 或 Path.stat().st_size 获取文件大小
"""

# ============================================================================
# 5. 高级文件操作练习
# ============================================================================

print("\n5. 高级文件操作练习")
print("-" * 30)

"""
练习 5.1: 大文件处理器

创建一个名为 large_file_processor.py 的程序，实现以下功能：
1. 生成一个大文件（至少100MB，可以是随机数据或重复文本）
2. 实现以下处理大文件的函数，并比较它们的性能：
   - 计算文件的行数
   - 查找特定字符串或模式的出现次数
   - 将文件分割成多个小文件
   - 合并多个文件成一个大文件

3. 对于每个函数，实现至少两种不同的方法：
   - 一种内存高效的方法（分块读取）
   - 一种速度优化的方法（可能消耗更多内存）

4. 测量并比较不同方法的执行时间和内存使用情况

提示：
- 使用 time 模块测量执行时间
- 使用 memory_profiler 或 resource 模块监控内存使用
- 实现生成器函数进行惰性处理
- 考虑使用多线程或多进程加速处理
"""

"""
练习 5.2: 文件监视器

创建一个名为 file_monitor.py 的程序，实现一个文件系统监视器，功能如下：
1. 监视指定目录中的文件变化（创建、修改、删除）
2. 当检测到变化时，记录以下信息：
   - 变化类型（创建、修改、删除）
   - 文件路径
   - 时间戳
   - 文件大小（对于创建和修改）

3. 提供以下功能：
   - 实时显示变化信息
   - 将变化记录保存到日志文件
   - 可选：根据变化类型执行自定义操作（如备份修改的文件）

4. 支持监视多个目录

提示：
- 在Windows上，可以使用 watchdog 库
- 在Linux上，可以使用 inotify 或 watchdog
- 在macOS上，可以使用 FSEvents 或 watchdog
- 如果不使用第三方库，可以通过定期扫描目录并比较文件状态来实现

注意：可能需要安装第三方库：pip install watchdog
"""

"""
练习 5.3: 文件压缩与归档工具

创建一个名为 file_archiver.py 的程序，实现一个文件压缩和归档工具，功能如下：
1. 支持以下操作：
   - 将文件或目录压缩为ZIP或TAR格式
   - 解压ZIP或TAR文件到指定目录
   - 查看压缩文件的内容列表
   - 从压缩文件中提取特定文件
   - 向现有压缩文件添加新文件

2. 支持压缩选项：
   - 不同的压缩级别
   - 密码保护（对于ZIP）
   - 排除特定文件或目录

3. 提供命令行界面和函数API

提示：
- 使用 zipfile 模块处理ZIP文件
- 使用 tarfile 模块处理TAR文件
- 实现进度显示功能
- 考虑使用 argparse 模块创建命令行界面
"""

# ============================================================================
# 6. 综合应用练习
# ============================================================================

print("\n6. 综合应用练习")
print("-" * 30)

"""
练习 6.1: 简单数据库系统

创建一个名为 file_database.py 的程序，实现一个基于文件的简单数据库系统，功能如下：
1. 定义一个Database类，支持以下操作：
   - 创建表（定义字段和类型）
   - 插入记录
   - 更新记录
   - 删除记录
   - 查询记录（支持简单的条件查询）
   - 排序和分页

2. 数据存储：
   - 每个表存储为一个单独的文件（可以是JSON、CSV或自定义格式）
   - 支持索引以加速查询
   - 实现简单的事务支持（原子操作）

3. 实现一个简单的命令行界面，允许用户：
   - 执行CRUD操作
   - 导入和导出数据
   - 查看表结构
   - 执行简单的SQL风格查询

提示：
- 设计合理的文件格式，考虑读写效率和数据完整性
- 实现索引机制以加速查询
- 使用上下文管理器确保文件操作的安全性
- 考虑并发访问的问题
"""

"""
练习 6.2: 日志分析系统

创建一个名为 log_analyzer.py 的程序，实现一个日志分析系统，功能如下：
1. 支持常见的日志格式：
   - Apache/Nginx访问日志
   - 应用程序日志（带时间戳和日志级别）
   - 自定义格式日志

2. 提供以下分析功能：
   - 按时间段统计（小时、天、周、月）
   - 按日志级别统计（ERROR, WARNING, INFO等）
   - 识别异常模式（如错误率突增）
   - 提取和分析特定字段（如HTTP状态码、URL、IP地址）
   - 生成摘要报告

3. 可视化功能：
   - 生成时间序列图表
   - 生成饼图显示不同类型的分布
   - 导出为HTML报告

4. 支持处理大型日志文件和多个日志文件

提示：
- 使用正则表达式解析日志行
- 使用生成器函数处理大文件
- 考虑使用pandas进行数据分析
- 使用matplotlib或其他库生成图表
- 实现增量处理，避免重复分析已处理的日志
"""

"""
练习 6.3: 文件同步与备份系统

创建一个名为 backup_system.py 的程序，实现一个文件同步与备份系统，功能如下：
1. 配置：
   - 源目录和目标目录
   - 备份频率和类型（完整、增量、差异）
   - 排除规则（文件类型、大小、名称模式）
   - 保留策略（保留多少个版本，多长时间）

2. 备份功能：
   - 完整备份：复制所有文件
   - 增量备份：只复制自上次备份后修改的文件
   - 差异备份：复制自上次完整备份后修改的文件
   - 压缩备份文件以节省空间
   - 可选：加密备份文件

3. 恢复功能：
   - 恢复完整备份
   - 从增量或差异备份中恢复
   - 恢复特定文件或目录
   - 恢复到特定时间点

4. 管理功能：
   - 列出所有备份及其内容
   - 验证备份完整性
   - 清理旧备份
   - 生成备份报告

提示：
- 使用文件元数据（修改时间、大小、哈希值）跟踪变化
- 实现日志记录和错误处理
- 考虑使用数据库存储备份元数据
- 实现定时任务调度
- 考虑网络备份的情况
"""

print("\n" + "=" * 50)
print("完成以上练习将帮助你掌握Python文件操作的各个方面！")
print("从基础的文件读写到高级的文件系统操作和实际应用场景。")
print("=" * 50)