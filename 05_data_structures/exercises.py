#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
数据结构 - 练习题

本文件包含各种数据结构的练习题，帮助巩固列表、元组、字典、集合等的使用。
"""

# ============================================================================
# 练习1：列表操作基础
# ============================================================================

def exercise_1_list_basics():
    """
    练习1：列表操作基础
    
    要求：
    1. 创建一个包含1-10的列表
    2. 在列表末尾添加数字11
    3. 在索引2的位置插入数字99
    4. 删除数字5
    5. 获取列表的长度
    6. 计算列表所有元素的和
    7. 找出列表中的最大值和最小值
    8. 将列表反转
    """
    print("练习1：列表操作基础")
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习2：列表推导式
# ============================================================================

def exercise_2_list_comprehension():
    """
    练习2：列表推导式
    
    要求：
    1. 创建一个包含1-20中所有偶数的列表
    2. 创建一个包含1-10中每个数字平方的列表
    3. 从字符串"hello world"中提取所有元音字母
    4. 创建一个3x3的矩阵，元素为行号*列号
    5. 从列表[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]中筛选出大于5的偶数
    """
    print("练习2：列表推导式")
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习3：元组操作
# ============================================================================

def exercise_3_tuple_operations():
    """
    练习3：元组操作
    
    要求：
    1. 创建一个包含学生信息的元组：("张三", 20, "计算机科学")
    2. 使用元组解包获取姓名、年龄和专业
    3. 创建一个包含多个坐标点的元组列表：[(0,0), (1,1), (2,4), (3,9)]
    4. 计算所有点到原点的距离
    5. 使用命名元组创建一个Point类，包含x和y坐标
    6. 创建几个Point实例并计算它们之间的距离
    """
    print("练习3：元组操作")
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习4：字典操作基础
# ============================================================================

def exercise_4_dict_basics():
    """
    练习4：字典操作基础
    
    要求：
    1. 创建一个学生成绩字典：{"数学": 85, "英语": 90, "科学": 78}
    2. 添加一门新课程"历史"，成绩为88
    3. 修改数学成绩为92
    4. 删除科学这门课程
    5. 检查是否包含"物理"这门课程
    6. 获取所有课程名称
    7. 获取所有成绩
    8. 计算平均成绩
    """
    print("练习4：字典操作基础")
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习5：字典推导式和嵌套
# ============================================================================

def exercise_5_dict_advanced():
    """
    练习5：字典推导式和嵌套
    
    要求：
    1. 使用字典推导式创建一个字典，键为1-5，值为键的平方
    2. 从列表["apple", "banana", "cherry"]创建一个字典，键为水果名，值为长度
    3. 创建一个嵌套字典表示班级信息：
       {
         "学生1": {"姓名": "张三", "成绩": {"数学": 85, "英语": 90}},
         "学生2": {"姓名": "李四", "成绩": {"数学": 92, "英语": 88}}
       }
    4. 计算每个学生的平均成绩
    5. 找出数学成绩最高的学生
    """
    print("练习5：字典推导式和嵌套")
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习6：集合操作
# ============================================================================

def exercise_6_set_operations():
    """
    练习6：集合操作
    
    要求：
    1. 创建两个集合：set1 = {1, 2, 3, 4, 5}, set2 = {4, 5, 6, 7, 8}
    2. 计算两个集合的并集
    3. 计算两个集合的交集
    4. 计算set1相对于set2的差集
    5. 计算两个集合的对称差集
    6. 判断{1, 2}是否是set1的子集
    7. 从字符串"programming"中创建一个字符集合（去重）
    8. 统计字符串"hello world"中有多少个不同的字符
    """
    print("练习6：集合操作")
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习7：数据结构转换
# ============================================================================

def exercise_7_data_conversion():
    """
    练习7：数据结构转换
    
    要求：
    1. 将字符串"1,2,3,4,5"转换为整数列表
    2. 将列表["a", "b", "c"]转换为字典，键为索引，值为字母
    3. 将字典{"a": 1, "b": 2, "c": 3}转换为元组列表
    4. 从列表[1, 2, 2, 3, 3, 3, 4]创建一个去重的有序列表
    5. 将嵌套列表[[1, 2], [3, 4], [5, 6]]展平为一维列表
    """
    print("练习7：数据结构转换")
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习8：文本分析
# ============================================================================

def exercise_8_text_analysis():
    """
    练习8：文本分析
    
    给定文本：
    "Python is a powerful programming language. Python is easy to learn.
    Many developers choose Python for data analysis and web development."
    
    要求：
    1. 统计文本中每个单词的出现次数
    2. 找出出现次数最多的3个单词
    3. 统计文本中不同单词的数量
    4. 找出长度大于5的所有单词
    5. 计算文本中"Python"出现的次数
    6. 将所有单词按字母顺序排序（去重）
    """
    print("练习8：文本分析")
    text = """Python is a powerful programming language. Python is easy to learn.
    Many developers choose Python for data analysis and web development."""
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习9：学生管理系统
# ============================================================================

def exercise_9_student_management():
    """
    练习9：学生管理系统
    
    要求：
    1. 创建一个学生数据库（使用字典），包含以下学生信息：
       - 学号、姓名、年龄、专业、成绩（多门课程）
    2. 实现以下功能：
       - 添加新学生
       - 删除学生
       - 修改学生信息
       - 查找学生（按学号或姓名）
       - 计算学生平均成绩
       - 按平均成绩排序
       - 按专业分组
       - 统计各专业人数
    """
    print("练习9：学生管理系统")
    # 在这里编写你的代码
    
    # 示例数据结构
    students = {
        "001": {
            "姓名": "张三",
            "年龄": 20,
            "专业": "计算机科学",
            "成绩": {"数学": 85, "英语": 90, "编程": 95}
        },
        "002": {
            "姓名": "李四",
            "年龄": 21,
            "专业": "数学",
            "成绩": {"数学": 92, "英语": 88, "统计学": 90}
        }
    }
    
    pass

# ============================================================================
# 练习10：数据统计和分析
# ============================================================================

def exercise_10_data_analysis():
    """
    练习10：数据统计和分析
    
    给定销售数据：
    sales_data = [
        {"产品": "笔记本电脑", "销量": 50, "单价": 5000, "月份": "1月"},
        {"产品": "手机", "销量": 120, "单价": 3000, "月份": "1月"},
        {"产品": "平板电脑", "销量": 80, "单价": 2000, "月份": "1月"},
        {"产品": "笔记本电脑", "销量": 60, "单价": 5000, "月份": "2月"},
        {"产品": "手机", "销量": 150, "单价": 3000, "月份": "2月"},
        {"产品": "平板电脑", "销量": 90, "单价": 2000, "月份": "2月"}
    ]
    
    要求：
    1. 计算每个产品的总销量
    2. 计算每个产品的总销售额
    3. 找出销量最高的产品
    4. 找出销售额最高的月份
    5. 计算每个月的总销售额
    6. 按产品分组，显示每个产品在不同月份的销量
    7. 计算平均单价
    8. 找出单价最高和最低的产品
    """
    print("练习10：数据统计和分析")
    
    sales_data = [
        {"产品": "笔记本电脑", "销量": 50, "单价": 5000, "月份": "1月"},
        {"产品": "手机", "销量": 120, "单价": 3000, "月份": "1月"},
        {"产品": "平板电脑", "销量": 80, "单价": 2000, "月份": "1月"},
        {"产品": "笔记本电脑", "销量": 60, "单价": 5000, "月份": "2月"},
        {"产品": "手机", "销量": 150, "单价": 3000, "月份": "2月"},
        {"产品": "平板电脑", "销量": 90, "单价": 2000, "月份": "2月"}
    ]
    
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习11：高级数据结构应用
# ============================================================================

def exercise_11_advanced_structures():
    """
    练习11：高级数据结构应用
    
    要求：
    1. 使用Counter统计一段文本中每个字符的出现频率
    2. 使用defaultdict创建一个按首字母分组的单词字典
    3. 使用deque实现一个简单的浏览器历史记录功能（前进、后退）
    4. 使用heapq找出一个数字列表中最大的5个数和最小的5个数
    5. 使用OrderedDict实现一个LRU（最近最少使用）缓存
    """
    print("练习11：高级数据结构应用")
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习12：性能优化
# ============================================================================

def exercise_12_performance():
    """
    练习12：性能优化
    
    要求：
    1. 比较在大列表中查找元素 vs 在集合中查找元素的性能
    2. 比较字符串拼接的不同方法的性能（+= vs join）
    3. 比较列表推导式 vs 传统循环创建列表的性能
    4. 比较字典的get方法 vs 直接访问（带异常处理）的性能
    5. 测试不同数据结构的内存使用情况
    """
    print("练习12：性能优化")
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习13：数据清洗
# ============================================================================

def exercise_13_data_cleaning():
    """
    练习13：数据清洗
    
    给定脏数据：
    dirty_data = [
        {"姓名": "  张三  ", "年龄": "25", "邮箱": "zhangsan@email.com", "电话": "123-456-7890"},
        {"姓名": "李四", "年龄": "abc", "邮箱": "invalid-email", "电话": "987-654-3210"},
        {"姓名": "", "年龄": "30", "邮箱": "wangwu@email.com", "电话": "555-123-4567"},
        {"姓名": "赵六", "年龄": "22", "邮箱": "zhaoliu@email.com", "电话": "invalid-phone"},
        {"姓名": "钱七", "年龄": "-5", "邮箱": "qianqi@email.com", "电话": "111-222-3333"}
    ]
    
    要求：
    1. 清理姓名字段（去除空白字符）
    2. 验证和转换年龄字段（必须是正整数）
    3. 验证邮箱格式
    4. 验证电话号码格式
    5. 移除无效记录
    6. 统计清洗前后的数据质量
    """
    print("练习13：数据清洗")
    
    dirty_data = [
        {"姓名": "  张三  ", "年龄": "25", "邮箱": "zhangsan@email.com", "电话": "123-456-7890"},
        {"姓名": "李四", "年龄": "abc", "邮箱": "invalid-email", "电话": "987-654-3210"},
        {"姓名": "", "年龄": "30", "邮箱": "wangwu@email.com", "电话": "555-123-4567"},
        {"姓名": "赵六", "年龄": "22", "邮箱": "zhaoliu@email.com", "电话": "invalid-phone"},
        {"姓名": "钱七", "年龄": "-5", "邮箱": "qianqi@email.com", "电话": "111-222-3333"}
    ]
    
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习14：图数据结构
# ============================================================================

def exercise_14_graph_structure():
    """
    练习14：图数据结构
    
    要求：
    1. 使用字典表示一个无向图（邻接表）
    2. 实现添加节点和边的功能
    3. 实现深度优先搜索（DFS）
    4. 实现广度优先搜索（BFS）
    5. 找出图中的所有连通分量
    6. 计算两个节点之间的最短路径
    
    示例图：
    A -- B -- D
    |    |    |
    C    E    F
    """
    print("练习14：图数据结构")
    # 在这里编写你的代码
    pass

# ============================================================================
# 练习15：综合应用 - 简单数据库
# ============================================================================

def exercise_15_simple_database():
    """
    练习15：综合应用 - 简单数据库
    
    要求：
    使用Python的数据结构实现一个简单的内存数据库，支持以下操作：
    
    1. 创建表（定义字段）
    2. 插入记录
    3. 删除记录
    4. 更新记录
    5. 查询记录（支持条件查询）
    6. 创建索引（提高查询性能）
    7. 聚合查询（COUNT, SUM, AVG, MAX, MIN）
    8. 排序
    9. 分组
    10. 连接查询（简单的内连接）
    
    示例使用：
    db = SimpleDatabase()
    db.create_table("users", ["id", "name", "age", "email"])
    db.insert("users", {"id": 1, "name": "张三", "age": 25, "email": "zhangsan@email.com"})
    db.select("users", where={"age": lambda x: x > 20})
    """
    print("练习15：综合应用 - 简单数据库")
    
    class SimpleDatabase:
        def __init__(self):
            # 在这里初始化数据库
            pass
        
        def create_table(self, table_name, columns):
            # 创建表
            pass
        
        def insert(self, table_name, record):
            # 插入记录
            pass
        
        def select(self, table_name, where=None, order_by=None):
            # 查询记录
            pass
        
        def update(self, table_name, updates, where=None):
            # 更新记录
            pass
        
        def delete(self, table_name, where=None):
            # 删除记录
            pass
    
    # 测试代码
    # db = SimpleDatabase()
    # 在这里编写测试代码
    pass

if __name__ == "__main__":
    print("数据结构练习题")
    print("=" * 50)
    print("请选择要运行的练习（1-15），或输入0运行所有练习：")
    
    exercises = [
        exercise_1_list_basics,
        exercise_2_list_comprehension,
        exercise_3_tuple_operations,
        exercise_4_dict_basics,
        exercise_5_dict_advanced,
        exercise_6_set_operations,
        exercise_7_data_conversion,
        exercise_8_text_analysis,
        exercise_9_student_management,
        exercise_10_data_analysis,
        exercise_11_advanced_structures,
        exercise_12_performance,
        exercise_13_data_cleaning,
        exercise_14_graph_structure,
        exercise_15_simple_database
    ]
    
    # 运行所有练习（示例）
    for i, exercise in enumerate(exercises, 1):
        print(f"\n{'='*20} 练习 {i} {'='*20}")
        exercise()
    
    print("\n练习完成！")
    print("\n学习建议：")
    print("1. 先理解每种数据结构的特点和适用场景")
    print("2. 多练习数据结构之间的转换")
    print("3. 注意性能差异，选择合适的数据结构")
    print("4. 掌握推导式的使用，提高代码简洁性")
    print("5. 学会使用collections模块中的高级数据结构")
    print("6. 在实际项目中应用这些数据结构解决问题")